import Client from './Client';
import SocketWrapper from './SocketWrapper';
import { mock } from 'jest-mock-extended';
import { types as soup } from 'mediasoup';


describe('When Client class is created it', () => {
  let socketWrapper : SocketWrapper;
  let client: Client;
  beforeEach(() => {
    socketWrapper = mock<SocketWrapper>();
    client = new Client({ws: socketWrapper});
  });
  it('can be successfully instantiated', () => {
    expect(client).toBeTruthy();
  });
  
  it('has a uuid autogenerated if not provided', () => {
    expect(client).toHaveProperty('id');
    // console.log('uuid:', client.id);
    expect(client.id).toBeDefined();
  });

  it('its possible to assign custom uuid', ()=> {
    const randomString = Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);
    client = new Client({ws: socketWrapper, id: randomString});
    expect(client).toHaveProperty('id');
    expect(client.id).toBe(randomString);
  });


});

describe('client instance with exposed private field', () => {
  let socketWrapper : SocketWrapper;
  let client: Client;
  let messageHandler: (msg: SocketMessage<UnknownMessageType>) => void;
  beforeEach(() => {
    socketWrapper = mock<SocketWrapper>();
    client = new Client({ws: socketWrapper});
    // @ts-expect-error I allow private access in tests because I'm the chief!!!
    messageHandler = client.handleReceivedMsg;

  });

  it('can set RtpCapabilities from valid incoming message', () => {
    // const message = mock<SocketMessage<SetRtpCapabilities>>();
    const validMsgObj: SocketMessage<UnknownMessageType> = {
      type: 'setRtpCapabilities',
      data: {codecs: []},
    };

    messageHandler(validMsgObj);
    // console.log(client.rtpCapabilities);
    expect(client.rtpCapabilities).toEqual<soup.RtpCapabilities>(validMsgObj.data);
  });

  it('can join a gathering from valid join request', () => {
    // const gatheringName = 'cool-gathering';
    const validGatheringId = '4j4j4j4j4';
    const validJoinRoomRequest: SocketMessage<JoinGathering> = {
      ackNeeded: true,
      type: 'joinGathering',
      data: {id: validGatheringId}
    };
    messageHandler(validJoinRoomRequest);

    expect(client.gathering).toBeDefined();
  });

  it('can join a room from valid join request', () => {
    const validRoomName = 'very-cool-room';
    const validJoinRoomRequest: SocketMessage<JoinRoom> = {
      ackNeeded: true,
      type: 'joinRoom',
      data: {roomName: validRoomName,}
    };
    messageHandler(validJoinRoomRequest);

    expect(client.room).toBeDefined();
  });
});