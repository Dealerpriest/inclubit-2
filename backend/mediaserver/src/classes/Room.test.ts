import Room from './Room';
import {types } from 'mediasoup';
import { mock } from 'jest-mock-extended';

describe('when instantiating a room it', () => {

  it('gets a uuid autogenerated if not provided', async () => {
    const worker = mock<types.Worker>();
    const room = await Room.createRoom(undefined, worker);
    expect(room).toBeDefined();
    expect(room.id).toBeDefined();
  });

  it('uses a custom uuid if provided', async () => {
    const customUuid = 'Ã¶kjhasr3';
    const worker = mock<types.Worker>();
    const room = await Room.createRoom(customUuid, worker);
    expect(room.id).toBe(customUuid);
  });

  // it('cant be done by calling the constructor directly', () => {
  //   const router = mock<types.Router>();
  //   const room = new Room('test', router);
  // });
});

describe('a valid room with a mocked worker', () => {
  it('doesnt allow an unathourized client to add themselves to the room', () => {
    // TODO: Create logic for identifying/auhtorize users
  });
  it('allows an authorized client to add themselves to the room', () => {
    // TODO: finish this test
  });
  it('notifies all clients in the room when a new client is added', () => {
    // TODO: create test
  });
  it('notifies all clients in the room when a client leaves', () => {
    // TODO: create test
  });
  it('cant add the same client twice', ()=>{
    // TODO: create test
  });
  it('removes a client if requested by that same client', ()=>{
    // TODO: create test
  });
  it('wont remove another client if requested by normal user', ()=>{
    // TODO: create test
  });
  it('removes another client if requested by super user', ()=>{
    // TODO: create test
  });
});