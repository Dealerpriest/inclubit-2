import Client from './Client';
import SocketWrapper from './SocketWrapper';
import { mock } from 'jest-mock-extended';


describe('The client class', () => {
  let socketWrapper : SocketWrapper;
  let client: Client;
  beforeEach(() => {
    socketWrapper = mock<SocketWrapper>();
    client = new Client({ws: socketWrapper});
  });
  it('can be successfully instantiated', () => {
    expect(client).toBeTruthy();
  });
  
  it('has a uuid autogenerated', () => {
    expect(client).toHaveProperty('id');
    // console.log('uuid:', client.id);
    expect(client.id).toBeDefined();
  });

  it('can be created with a custom uuid', ()=> {
    const randomString = Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);
    client = new Client({ws: socketWrapper, id: randomString});
    expect(client).toHaveProperty('id');
    expect(client.id).toBe(randomString);
  });

  it('can set RtpCapabilities', () => {
    const message = mock<SocketMessage<SetRtpCapabilities>>();
    // TODO. Find a way to mock or in other ways trigger the event in the socketWrapper object.
    // Then we can check that the client class correctly handles the incoming message.
  });

});